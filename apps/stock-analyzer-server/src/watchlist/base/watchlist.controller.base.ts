/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WatchlistService } from "../watchlist.service";
import { WatchlistCreateInput } from "./WatchlistCreateInput";
import { Watchlist } from "./Watchlist";
import { WatchlistFindManyArgs } from "./WatchlistFindManyArgs";
import { WatchlistWhereUniqueInput } from "./WatchlistWhereUniqueInput";
import { WatchlistUpdateInput } from "./WatchlistUpdateInput";

export class WatchlistControllerBase {
  constructor(protected readonly service: WatchlistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Watchlist })
  async createWatchlist(
    @common.Body() data: WatchlistCreateInput
  ): Promise<Watchlist> {
    return await this.service.createWatchlist({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Watchlist] })
  @ApiNestedQuery(WatchlistFindManyArgs)
  async watchlists(@common.Req() request: Request): Promise<Watchlist[]> {
    const args = plainToClass(WatchlistFindManyArgs, request.query);
    return this.service.watchlists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Watchlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async watchlist(
    @common.Param() params: WatchlistWhereUniqueInput
  ): Promise<Watchlist | null> {
    const result = await this.service.watchlist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Watchlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWatchlist(
    @common.Param() params: WatchlistWhereUniqueInput,
    @common.Body() data: WatchlistUpdateInput
  ): Promise<Watchlist | null> {
    try {
      return await this.service.updateWatchlist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Watchlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWatchlist(
    @common.Param() params: WatchlistWhereUniqueInput
  ): Promise<Watchlist | null> {
    try {
      return await this.service.deleteWatchlist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
