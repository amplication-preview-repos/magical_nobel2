/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StockPrice as PrismaStockPrice,
  Stock as PrismaStock,
} from "@prisma/client";

export class StockPriceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StockPriceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stockPrice.count(args);
  }

  async stockPrices<T extends Prisma.StockPriceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockPriceFindManyArgs>
  ): Promise<PrismaStockPrice[]> {
    return this.prisma.stockPrice.findMany<Prisma.StockPriceFindManyArgs>(args);
  }
  async stockPrice<T extends Prisma.StockPriceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockPriceFindUniqueArgs>
  ): Promise<PrismaStockPrice | null> {
    return this.prisma.stockPrice.findUnique(args);
  }
  async createStockPrice<T extends Prisma.StockPriceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockPriceCreateArgs>
  ): Promise<PrismaStockPrice> {
    return this.prisma.stockPrice.create<T>(args);
  }
  async updateStockPrice<T extends Prisma.StockPriceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockPriceUpdateArgs>
  ): Promise<PrismaStockPrice> {
    return this.prisma.stockPrice.update<T>(args);
  }
  async deleteStockPrice<T extends Prisma.StockPriceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockPriceDeleteArgs>
  ): Promise<PrismaStockPrice> {
    return this.prisma.stockPrice.delete(args);
  }

  async getStock(parentId: string): Promise<PrismaStock | null> {
    return this.prisma.stockPrice
      .findUnique({
        where: { id: parentId },
      })
      .stock();
  }
}
