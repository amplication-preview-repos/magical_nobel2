/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StockPriceService } from "../stockPrice.service";
import { StockPriceCreateInput } from "./StockPriceCreateInput";
import { StockPrice } from "./StockPrice";
import { StockPriceFindManyArgs } from "./StockPriceFindManyArgs";
import { StockPriceWhereUniqueInput } from "./StockPriceWhereUniqueInput";
import { StockPriceUpdateInput } from "./StockPriceUpdateInput";

export class StockPriceControllerBase {
  constructor(protected readonly service: StockPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StockPrice })
  async createStockPrice(
    @common.Body() data: StockPriceCreateInput
  ): Promise<StockPrice> {
    return await this.service.createStockPrice({
      data: {
        ...data,

        stock: data.stock
          ? {
              connect: data.stock,
            }
          : undefined,
      },
      select: {
        closePrice: true,
        createdAt: true,
        date: true,
        highPrice: true,
        id: true,
        lowPrice: true,
        openPrice: true,

        stock: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StockPrice] })
  @ApiNestedQuery(StockPriceFindManyArgs)
  async stockPrices(@common.Req() request: Request): Promise<StockPrice[]> {
    const args = plainToClass(StockPriceFindManyArgs, request.query);
    return this.service.stockPrices({
      ...args,
      select: {
        closePrice: true,
        createdAt: true,
        date: true,
        highPrice: true,
        id: true,
        lowPrice: true,
        openPrice: true,

        stock: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StockPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stockPrice(
    @common.Param() params: StockPriceWhereUniqueInput
  ): Promise<StockPrice | null> {
    const result = await this.service.stockPrice({
      where: params,
      select: {
        closePrice: true,
        createdAt: true,
        date: true,
        highPrice: true,
        id: true,
        lowPrice: true,
        openPrice: true,

        stock: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StockPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStockPrice(
    @common.Param() params: StockPriceWhereUniqueInput,
    @common.Body() data: StockPriceUpdateInput
  ): Promise<StockPrice | null> {
    try {
      return await this.service.updateStockPrice({
        where: params,
        data: {
          ...data,

          stock: data.stock
            ? {
                connect: data.stock,
              }
            : undefined,
        },
        select: {
          closePrice: true,
          createdAt: true,
          date: true,
          highPrice: true,
          id: true,
          lowPrice: true,
          openPrice: true,

          stock: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StockPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStockPrice(
    @common.Param() params: StockPriceWhereUniqueInput
  ): Promise<StockPrice | null> {
    try {
      return await this.service.deleteStockPrice({
        where: params,
        select: {
          closePrice: true,
          createdAt: true,
          date: true,
          highPrice: true,
          id: true,
          lowPrice: true,
          openPrice: true,

          stock: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
