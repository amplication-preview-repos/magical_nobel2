/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StockPrice } from "./StockPrice";
import { StockPriceCountArgs } from "./StockPriceCountArgs";
import { StockPriceFindManyArgs } from "./StockPriceFindManyArgs";
import { StockPriceFindUniqueArgs } from "./StockPriceFindUniqueArgs";
import { CreateStockPriceArgs } from "./CreateStockPriceArgs";
import { UpdateStockPriceArgs } from "./UpdateStockPriceArgs";
import { DeleteStockPriceArgs } from "./DeleteStockPriceArgs";
import { Stock } from "../../stock/base/Stock";
import { StockPriceService } from "../stockPrice.service";
@graphql.Resolver(() => StockPrice)
export class StockPriceResolverBase {
  constructor(protected readonly service: StockPriceService) {}

  async _stockPricesMeta(
    @graphql.Args() args: StockPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StockPrice])
  async stockPrices(
    @graphql.Args() args: StockPriceFindManyArgs
  ): Promise<StockPrice[]> {
    return this.service.stockPrices(args);
  }

  @graphql.Query(() => StockPrice, { nullable: true })
  async stockPrice(
    @graphql.Args() args: StockPriceFindUniqueArgs
  ): Promise<StockPrice | null> {
    const result = await this.service.stockPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StockPrice)
  async createStockPrice(
    @graphql.Args() args: CreateStockPriceArgs
  ): Promise<StockPrice> {
    return await this.service.createStockPrice({
      ...args,
      data: {
        ...args.data,

        stock: args.data.stock
          ? {
              connect: args.data.stock,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => StockPrice)
  async updateStockPrice(
    @graphql.Args() args: UpdateStockPriceArgs
  ): Promise<StockPrice | null> {
    try {
      return await this.service.updateStockPrice({
        ...args,
        data: {
          ...args.data,

          stock: args.data.stock
            ? {
                connect: args.data.stock,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockPrice)
  async deleteStockPrice(
    @graphql.Args() args: DeleteStockPriceArgs
  ): Promise<StockPrice | null> {
    try {
      return await this.service.deleteStockPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Stock, {
    nullable: true,
    name: "stock",
  })
  async getStock(@graphql.Parent() parent: StockPrice): Promise<Stock | null> {
    const result = await this.service.getStock(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
